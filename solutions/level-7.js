// Возвращает количество гласных в заданной строке.
// Мы будем считать a, e, i, o, u гласными для этой ката (но не y).
// Входная строка будет состоять только из строчных букв и/или пробелов.

const getCount = str => {
  return str.split('').filter(char => 'aeiou'.includes(char)).length
}

const getCount1 = str => {
  let res = 0
  for (let i = 0; i < str.length; i++) {
    if ('aeiou'.includes(str[i])) {
      res += 1
    }
  }
  return res
}

const getCount2 = str => {
  return str.split('').reduce((acc, char) => {
    return 'aeiou'.includes(char) ? acc + 1 : acc
  }, 0)
}

// Тролли атакуют ваш раздел комментариев!
// Обычный способ справиться с этой ситуацией — удалить все гласные из комментариев троллей, нейтрализовав угрозу.
// Ваша задача — написать функцию, которая принимает строку и возвращает новую строку, из которой удалены все гласные.
// Например, строка «Этот сайт для неудачников LOL!» превратится в «Ths wbst s fr lsrs LL!».
// Примечание: в этой ката y не считается гласной.

const disemvowel = str => {
  return str
    .split('')
    .filter(char => !'aeiouAEIOU'.includes(char))
    .join('')
}

const disemvowel1 = str => {
  let res = ''
  for (let i = 0; i < str.length; i++) {
    if (!'aeiouAEIOU'.includes(str[i])) {
      res += str[i]
    }
  }
  return res
}

// Добро пожаловать. В этом задании вам предлагается возвести в квадрат каждую цифру числа и сложить их.
// Например, если мы пропустим через функцию 9119, получится 811181, потому что 92 — это 81, а 12 — это 1. (81-1-1-81)
// Пример №2: Ввод числа 765 вернёт/должен вернуть 493625, потому что 72 — это 49, 62 — это 36, а 52 — это 25. (49-36-25)
// Примечание: Функция принимает и возвращает целое число.
// Удачного программирования!

const squareDigits = num =>
  Number(
    num
      .toString()
      .split('')
      .map(d => Number(d) ** 2)
      .join('')
  )

// В этом небольшом задании вам дана строка чисел, разделённых пробелами, и вам нужно вернуть наибольшее и наименьшее числа.
// Примеры
// highAndLow("1 2 3 4 5"); // вернуть "5 1"
// highAndLow("1 2 -3 4 5"); // вернуть "5 -3"
// highAndLow("1 9 3 4 -5"); // вернуть "9 -5"
// Примечания
// Все числа являются допустимыми числами типа Int32, проверять их не нужно.
// Во входной строке всегда будет хотя бы одно число.
// Выходная строка должна состоять из двух чисел, разделённых одним пробелом, причём наибольшее число должно быть первым.

const highAndLow = numbers => {
  numbers = numbers.split(' ')
  return `${Math.max(...numbers)} ${Math.min(...numbers)}`
}

// Ваша задача — создать функцию, которая принимает в качестве аргумента любое неотрицательное целое число и возвращает его с цифрами в порядке убывания. По сути, нужно переставить цифры так, чтобы получить максимально возможное число.
// Примеры:
// Вход: 42145
// Выход: 54421
// Вход: 145263
// Выход: 654321
// Вход: 123456789
// Выход: 987654321

const descendingOrder = n => {
  return Number([...n.toString()].sort((a, b) => b - a).join(''))
}

// В этом задании вы создадите функцию, которая принимает список неотрицательных целых чисел и строк и возвращает новый список, в котором строки отфильтрованы.
// Пример
// filter_list([1,2,'a','b']) == [1,2]
// filter_list([1,'a','b',0,15]) == [1,0,15]
// filter_list([1,2,'aasf','1','123',123]) == [1,2,123]

const filter_list = l => l.filter(num => typeof num === 'number')

// Вам дана непустая строка. Ваша задача — вернуть средний(ые) символ(ы) строки.
// Если длина строки нечётная, верните средний символ.
// Если длина строки чётная, верните два средних символа.
// Примеры:
// "test" --> "es"
// "testing" --> "t"
// "middle" --> "dd"
// "A" --> "A"

const getMiddle = s =>
  s.slice(
    s.length % 2 === 0 ? s.length / 2 - 1 : Math.floor(s.length / 2),
    s.length % 2 === 0 ? s.length / 2 + 1 : Math.floor(s.length / 2) + 1
  )

function getMiddle1(s) {
  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1)
}

// Квадрат из квадратов
// Вам нравятся строительные блоки. Особенно вам нравятся строительные блоки-квадраты. А ещё больше вам нравится складывать их в квадрат из квадратных строительных блоков!
// Однако иногда из них не получается сложить квадрат. Вместо этого получается обычный прямоугольник! Вот же чёртовы штуки! Если бы у вас был способ узнать, не напрасно ли вы сейчас работаете… Постойте! Вот именно! Вам просто нужно проверить, является ли количество ваших строительных блоков точным квадратом.
// Задание
// Данному целому числу определить, является ли оно квадратом:
// В математике квадрат числа или точный квадрат — это целое число, являющееся квадратом целого числа; другими словами, это произведение некоторого целого числа на самого себя.
// В тестах всегда будет использоваться какое-то целое число, так что не беспокойтесь об этом в языках с динамической типизацией.

// -1  =>  false
//  0  =>  true
//  3  =>  false
//  4  =>  true
// 25  =>  true
// 26  =>  false

const isSquare = n => {
  return Math.sqrt(n) % 1 === 0
}

// Examples:
// accum("abcd") -> "A-Bb-Ccc-Dddd"
// accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
// accum("cwAt") -> "C-Ww-Aaa-Tttt"

const accum = s => {
  const letters = s.split('')
  return letters
    .map((letter, i) => {
      return letter.toUpperCase() + letter.toLowerCase().repeat(i)
    })
    .join('-')
}

// Изограмма — это слово, в котором нет повторяющихся букв, как последовательных, так и непоследовательных. Реализуйте функцию, которая определяет, является ли строка, содержащая только буквы, изограммой. Предположим, что пустая строка — изограмма. Регистр букв не учитывается.

Example: Input-- > Output

const isIsogram = str => {
  const letters = str.toLowerCase().split('')
  const uniqueLetters = new Set(letters)
  return uniqueLetters.size === letters.length
}

const isIsogram1 = str => {
  return new Set(str.toUpperCase()).size == str.length
}
